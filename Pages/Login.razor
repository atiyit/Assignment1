@page "/Login"
@namespace LoginComponent
@using Assignment.Authentication
@using Assignment.Models

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<AuthorizeView>
    <NotAuthorized>
        <div class="form-group">
            <label>User name:</label>
            <input type="text" placeholder="user name" @bind-value="username"/>
        </div>
        <div class="form-group">
            <label>Password</label>
            <input type="password" placeholder="password" @bind-value="password"/>
        </div>
        <button @onclick="PerformLogin">
            Login
        </button>
    </NotAuthorized>
    <Authorized>
        <button @onclick="PerformLogout">
            Log out
        </button>
    </Authorized>
</AuthorizeView>

@code {
    private string username;
    private string password;
    private string message;

    public async Task PerformLogin() {
        message = "";
        try {
            ((CustomAuthenticationStateProvider) AuthenticationStateProvider).ValidateLogin(username, password);
            username = "";
            password = "";
            NavigationManager.NavigateTo("/Login");
            message = "Login succeed!";
            MessageModel.getInstance().messageManage = message;
        } catch (Exception e) {
            message = e.Message;
            MessageModel.getInstance().messageManage = message;
        }
    }

    public async Task PerformLogout() {
        message = "";
        username = "";
        password = "";
        try {
            ((CustomAuthenticationStateProvider) AuthenticationStateProvider).Logout();
            NavigationManager.NavigateTo("/Login");
            message = "Logout succeed!";
            MessageModel.getInstance().messageManage = message;
        } catch (Exception e) { }
    }

}